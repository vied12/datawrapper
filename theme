#!/usr/bin/env python
# -----------------------------------------------------------------------------
# Theme manager for Datawrapper
# -----------------------------------------------------------------------------
# Author : Edouard Richard                                  <edou4rd@gmail.com>
# -----------------------------------------------------------------------------
# License : MIT License
# -----------------------------------------------------------------------------
# Creation : 18-Feb-2013
# Last mod : 18-Feb-2013
# -----------------------------------------------------------------------------
"""
	Theme manager for Datawrapper

Install a theme from a git repository and create a symlink to template in 
twig's directory.

"""
# TODO:
# [] create action
# [X] remove action

import subprocess
import sys, os, uuid, shutil

BASE_DIR  = os.path.abspath(os.path.dirname(__file__))
THEME_DIR = os.path.join(BASE_DIR, "www/static/themes")
TEMPL_DIR = os.path.join(BASE_DIR, "templates/themes")

ADD_SYNTAX    = "theme add <id> <git_url>"
UPDATE_SYNTAX = "theme update <id>"
REMOVE_SYNTAX = "theme remove <id>"
CREATE_SYNTAX = "theme create <id>"

def create_symlink(source, destination, force=False):
	if os.path.exists(destination):
		if force:
			save = raw_input("the template %s already exists. Do you want a backup? [y/n]\n" % destination) == 'y'
			if save:
				moved_file = "%s.backup-%s" % (destination, uuid.uuid4())
				os.rename(destination, moved_file)
				print " We saved it to %s" % (moved_file)
			else:
				os.remove(destination)
		else:
			raise Exception("the template %s already exists. Do a './theme update'" % destination)
	os.symlink(template_file, destination)
	print "template file copied in %s" % destination

if __name__ == "__main__":
	if len(sys.argv) > 2:
		action, theme_id = sys.argv[1:3]
		theme_dir        = os.path.join(THEME_DIR, theme_id)
		template_file    = os.path.join(theme_dir, "%s.twig" % theme_id)
		template_dest    = os.path.join(TEMPL_DIR, "%s.twig" % theme_id)

		if action == "add":
			assert len(sys.argv) == 4, "Syntax: %s" % ADD_SYNTAX
			theme_git = sys.argv[3]
			assert not os.path.exists(theme_dir), "the folder %s already exists. You probably want to update it.\nRun: ./theme update %s" % (theme_dir, theme_id)
			# clone the theme repository
			error = subprocess.call(['git', 'clone', theme_git, theme_dir], stdout=subprocess.PIPE)
			assert int(error) == 0, "An error has occurred, aborted"
			print "theme cloned in %s" % theme_dir
			# create a symlink for template file
			create_symlink(template_file, template_dest)
			sys.exit()

		if action == "update":
			assert len(sys.argv) == 3, "Syntax: %s" % UPDATE_SYNTAX
			assert os.path.exists(theme_dir), "%s doesn't exist, please run '%s' before" % (theme_dir, ADD_SYNTAX)
			# update the theme repository
			error = subprocess.call(['git', 'pull', 'origin'], stdout=subprocess.PIPE, stderr=subprocess.PIPE, cwd=theme_dir)
			assert int(error) == 0, "An error has occurred, aborted"
			create_symlink(template_file, template_dest, force=True)
			sys.exit()

		if action == "remove":
			assert len(sys.argv) == 3, "Syntax: %s" % REMOVE_SYNTAX
			assert os.path.exists(theme_dir), "%s theme doesn't exist" % (theme_id)
			shutil.rmtree(theme_dir)
			print "%s theme (%s) removed" % (theme_id, theme_dir)
			if os.path.lexists(template_dest):
				os.remove(template_dest)
				print "symlink %s removed" % template_dest
			sys.exit()

		# TODO
		# if action == "create":
		# 	assert len(sys.argv) == 3, "Syntax: %s" % CREATE_SYNTAX
		# 	assert not os.path.exists(theme_dir), "The folder '%s' already exists, aborted" % theme_dir
		# 	os.makedirs(theme_dir)
		# 	sys.exit()

	print "\nTheme manager for Datawrapper\n-----------------------------"
	print "3 options:\n"
	print '1. Add a theme to this datawrapper instance. Copy the template file (<id>.twig) in the template directory'
	print "\t$ ./%s" % ADD_SYNTAX
	print '\n2. Update a theme from git repository. Copy the template file (<id>.twig) in the template directory'
	print "\t$ ./%s" % UPDATE_SYNTAX
	# NOTE: uncomment when create action will be implemented
	# print '\n3. Create a new theme directory prepared to be configured'
	# print "\t$ ./%s" % CREATE_SYNTAX
	sys.exit('wrong syntax')
# EOF
